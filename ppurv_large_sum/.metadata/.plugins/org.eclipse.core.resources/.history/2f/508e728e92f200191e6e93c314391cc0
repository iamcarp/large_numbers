/*
 * sum.c
 *
 *  Created on: Oct 18, 2019
 *      Author: rtrk
 */
#include "sum.h"

const bool true = 1;
const bool false = 0;

bool isDigit(int_least8_t c)
{
	if (c >= '0' && c <= '9')
	{
		return true;
	}

	return false;
}



bool isOverflow(int_least64_t num1, int_least64_t b)
{
	// Overflow over LLONG_MAX checks
	if (num1 > 0 && b > 0)
	{
		if (num1 > LLONG_MAX - b)
		{
			return true;
		}
	}

	// It's All Good
	return false;
}


int_least64_t stringToNum(const int_least8_t* string, const int_least8_t** errorptr, int_least8_t* errorcode) {
	int_least8_t c = *string;  //character
	int_least8_t base = DECIMAL; // 10
	int_least8_t neg = 0;

	int_least8_t overflow = 0;

	int_least8_t cutlim = 0; // %10
	uint_least64_t cutoff = 0; // /10

	uint_least64_t acc = 0;


	if (c == '-')
	{
		neg = 1;
		string++;
	}
	else if (c == '+')
	{
		string++;
	}

	cutoff = neg ? -(uint_least64_t)LLONG_MIN : (uint_least64_t)LLONG_MAX;
	cutlim = cutoff % (uint_least64_t)base;
	cutoff /= (uint_least64_t)base;

	for (acc = 0, c = *string; c != '\0'; c = *(++string))
	{
		if (isDigit(c))
		{
			c -= '0';
		}
		else
		{
			*errorptr = string;
			*errorcode = ERROR_NOT_NUM;

			break;
		}

		if (acc > cutoff || (acc == cutoff && c > cutlim))
		{

			// Oh no, overflow.
			overflow = 1;

			break;
		}
		else
		{
			acc *= base;
			acc += c;
		}
	}

	if (overflow)
	{
		acc = neg ? LLONG_MIN : LLONG_MAX;
		*errorcode = ERROR_OUT_OF_RANGE;
	}
	else if (neg)
	{
		acc = -acc;
	}

	return (acc);
}





extern const bool true;
extern const bool false;

void addNums(const int_least8_t* ptr_a, const int_least8_t* ptr_b) {

	int_least64_t a = 0LL;
	int_least64_t b = 0LL;
	int_least8_t error = 0;
	const int_least8_t* error_msg = NULL;

	a = strToNum(ptr_a, &error_msg, &error);
	if (error == ERROR_OUT_OF_RANGE)
	{
		fprintf(stderr, "Out of range: %s\n", ptr_a);
		return;
	}
	else if (error == ERROR_NOT_NUM)
	{
		fprintf(stderr, "Invalid characters: %s\n", error_msg);
		return;
	}

	b = strToNum(ptr_b, &error_msg, &error);
	if (error == ERROR_OUT_OF_RANGE)
	{
		fprintf(stderr, "Out of range: %s\n", ptr_b);
		return;
	}
	else if (error == ERROR_NOT_NUM)
	{
		fprintf(stderr, "Invalid characters: %s\n", error_msg);
		return;
	}

	if (b > 0)
	{
		printf("%" PRIdLEAST64 " + %" PRIuLEAST64 " = %" PRIdLEAST64 " (%s)\n", a, (uint_least64_t)b, a+b, isOverflow(a, b, '+') != 0 ? "overflow"  : "ok");
	}
	else
	{
		printf("%" PRIdLEAST64 " - %" PRIuLEAST64 " = %" PRIdLEAST64 " (%s)\n", a, -(uint_least64_t)b, a+b, isOverflow(a, b, '+') != 0 ? "overflow"  : "ok");
	}
}

